apply plugin: 'com.android.application'
apply plugin: "org.sonarqube"



sonarqube {
    properties {
        property "sonar.projectName", "android_ejemplo"
        property "sonar.version", "1.0"

        property "sonar.sources", "./src/main/java"
        property "sonar.tests", "./src/test/java"

        property "sonar.java.binaries", "./build/intermediates/classes/debug"

        property "sonar.junit.reportsPath", "./build/test-results/release"

        property "sonar.jacoco.reportPath", "./build/jacoco/testDebugUnitTest.exec"


        property "sonar.android.lint.report", "./build/outputs/lint-results.xml"

        property "sonar.verbose", "false"
    }
}


android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    def versionPropsFile = file('version.properties')

    if (versionPropsFile.canRead()) {
        def Properties versionProps = new Properties()

        versionProps.load(new FileInputStream(versionPropsFile))
        def value = 0
        def runTasks = gradle.startParameter.taskNames
        if ('assemble' in runTasks ||'build' in runTasks || 'assembleRelease' in runTasks || 'aR' in runTasks) {
            value = 1;
        }

        println 'INIT VARIABLE VERSION CODE----------------------------------'
        println value
        println 'INIT VARIABLE VERSION CODE----------------------------------'
        def versionMajor = 1
        def versionMinor = 1
        def versionPatch = versionProps['VERSION_PATCH'].toInteger() + value
        def versionBuild = versionProps['VERSION_BUILD'].toInteger() + 1
        def version_Code = versionProps['VERSION_CODE'].toInteger() + value

        println 'INIT VARIABLE VERSION CODE----------------------------------'
        println version_Code
        println 'INIT VARIABLE VERSION CODE----------------------------------'

        versionProps['VERSION_PATCH'] = versionPatch.toString()
        versionProps['VERSION_BUILD'] = versionBuild.toString()
        versionProps['VERSION_CODE'] = version_Code.toString()

        println 'VARIABLE VERSION CODE----------------------------------'
        println versionProps['VERSION_CODE']
        println 'VARIABLE VERSION CODE----------------------------------'

        versionProps.store(versionPropsFile.newWriter(), null)

        defaultConfig {
            applicationId "alejosd5.tumblr.com.sd"
            minSdkVersion 15
            targetSdkVersion 23
            versionCode version_Code
            versionName "${versionMajor}.${versionMinor}.${versionPatch} (${versionBuild})"
        }
    } else {
        throw new GradleException("Could not read version.properties!")
    }

/*    defaultConfig {
        applicationId "alejosd5.tumblr.com.sd"
        minSdkVersion 15
        targetSdkVersion 23
        versionCode 2
        versionName "1.1"
    }*/
    signingConfigs {


        release {
            storeFile file("/home/sd/Documentos/tools/keys/sd.jks")
            storePassword "guitardark"
            keyAlias "alejosd5"
            keyPassword "guitardark"
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
            debug {
                testCoverageEnabled true
            }

    }



}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
    compile 'com.android.support:appcompat-v7:23.1.1'
    compile 'com.android.support:design:23.1.1'
}

apply plugin: 'jacoco'

jacoco {
    version "0.7.1.201405082137"
}

task jacocoTestReport(type: JacocoReport, dependsOn: "testDebugUnitTest") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled = true
        html.enabled = true
    }
    classDirectories = fileTree(
            dir: 'build/intermediates/classes/debug/com/yourapppackagename',
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/BuildConfig.*',
                       '**/Manifest*.*'])
    sourceDirectories = files('src/main/java')
    executionData = files('build/jacoco/testDebugUnitTest.exec')
    doFirst {
        files('build/intermediates/classes/debug').getFiles().each { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }
}